/*
 * This file was generated by the Gradle 'init' task.
 *
 * This is a general purpose Gradle build.
 * Learn how to create Gradle builds at https://guides.gradle.org/creating-new-gradle-builds/
 */


version '1.0.0'

repositories {
    mavenCentral()
}

apply plugin: 'java'
apply plugin: 'idea'

sourceCompatibility = 11


dependencies {
    implementation group: 'software.amazon.awssdk', name: 'bom', version: '2.13.49'
    implementation group: 'software.amazon.awssdk', name: 'sns', version: '2.13.49', transitive: true
    implementation group: 'com.amazonaws', name: 'aws-lambda-java-core', version: '1.2.1', transitive: false
    implementation group: 'com.amazonaws', name: 'aws-lambda-java-events', version: '3.1.0', transitive: false
    implementation group: 'com.amazonaws', name: 'aws-lambda-java-events-sdk-transformer', version: '2.0.0', transitive: false
    implementation group: 'com.amazonaws', name: 'aws-java-sdk-rekognition', version: '1.11.822', transitive: true
    implementation 'org.apache.commons:commons-lang3:3.7'
    implementation('org.apache.commons:commons-math3:3.6.1')

//    compile group: 'org.apache.logging.log4j', name: 'log4j-api', version: '2.13.3'
//    compile group: 'org.apache.logging.log4j', name: 'log4j-core', version: '2.13.3'
//    compile group: 'org.apache.logging.log4j', name: 'log4j-slf4j-impl', version: '2.13.3', transitive: true

    runtimeOnly 'org.apache.logging.log4j:log4j-slf4j18-impl:2.13.0'
    runtimeOnly group: 'com.amazonaws', name: 'aws-lambda-java-log4j2', version: '1.2.0'
    implementation group: 'com.google.code.gson', name: 'gson', version: '2.8.6', transitive: true
    implementation group: 'joda-time', name: 'joda-time', version: '2.10.6'

    testCompile group: 'org.hamcrest', name: 'hamcrest-core', version: '1.3'
    testCompile group: 'junit', name: 'junit-dep', version: '4.10'
    testCompile group: 'org.hamcrest', name: 'hamcrest-library', version: '1.3'
    testCompile group: 'org.mockito', name: 'mockito-core', version: '1.9.+'

}

task buildZip(type: Zip) {
    from compileJava
    from processResources
    into('lib') {
        from configurations.runtimeClasspath.collect {
            element ->


                def isDirectory = element.isDirectory()

                if (isDirectory) {
                    return zipTree(element)
                }

                def name = element.name

                if (name.contains("gson") ||
                        name.contains("sns") ||
                        name.contains("aws-core") ||
                        name.contains("utils") ||
                        name.contains("sdk-core") ||
                        name.contains("http-client-spi") ||
                        name.contains("auth") ||
                        name.contains("regions") ||
                        name.contains("slf4j-api") ||
                        name.contains("profiles") ||
                        name.contains("aws-query-protocol") ||
                        name.contains("apache-client") ||
                        name.contains("httpcore") ||
                        name.contains("httpclient") ||
                        name.contains("commons-logging") ||
                        name.contains("commons-lang3") ||
                        name.contains("commons-math3") ||
                        name.contains("aws-lambda-java-events") ||
                        name.contains("joda")
                ) {
                    println element
                    return element
                }

                return new File("C:\\t.txt")

        }
    }
}

jar {
    from {
        configurations.runtimeClasspath.collect {

            //println it
            def isDirectory = it?.isDirectory()

            if (isDirectory) {
                it
            } else {
                zipTree(it)
            }


        }
    }
}

build.dependsOn buildZip
